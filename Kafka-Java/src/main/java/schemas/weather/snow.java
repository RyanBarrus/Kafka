/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package schemas.weather;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class snow extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1538436250470268072L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"snow\",\"namespace\":\"schemas.weather\",\"fields\":[{\"name\":\"one_h\",\"type\":[\"null\",\"float\"],\"default\":null},{\"name\":\"three_h\",\"type\":[\"null\",\"float\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<snow> ENCODER =
      new BinaryMessageEncoder<snow>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<snow> DECODER =
      new BinaryMessageDecoder<snow>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<snow> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<snow> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<snow> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<snow>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this snow to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a snow from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a snow instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static snow fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.Float one_h;
   private java.lang.Float three_h;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public snow() {}

  /**
   * All-args constructor.
   * @param one_h The new value for one_h
   * @param three_h The new value for three_h
   */
  public snow(java.lang.Float one_h, java.lang.Float three_h) {
    this.one_h = one_h;
    this.three_h = three_h;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return one_h;
    case 1: return three_h;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: one_h = (java.lang.Float)value$; break;
    case 1: three_h = (java.lang.Float)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'one_h' field.
   * @return The value of the 'one_h' field.
   */
  public java.lang.Float getOneH() {
    return one_h;
  }


  /**
   * Sets the value of the 'one_h' field.
   * @param value the value to set.
   */
  public void setOneH(java.lang.Float value) {
    this.one_h = value;
  }

  /**
   * Gets the value of the 'three_h' field.
   * @return The value of the 'three_h' field.
   */
  public java.lang.Float getThreeH() {
    return three_h;
  }


  /**
   * Sets the value of the 'three_h' field.
   * @param value the value to set.
   */
  public void setThreeH(java.lang.Float value) {
    this.three_h = value;
  }

  /**
   * Creates a new snow RecordBuilder.
   * @return A new snow RecordBuilder
   */
  public static schemas.weather.snow.Builder newBuilder() {
    return new schemas.weather.snow.Builder();
  }

  /**
   * Creates a new snow RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new snow RecordBuilder
   */
  public static schemas.weather.snow.Builder newBuilder(schemas.weather.snow.Builder other) {
    if (other == null) {
      return new schemas.weather.snow.Builder();
    } else {
      return new schemas.weather.snow.Builder(other);
    }
  }

  /**
   * Creates a new snow RecordBuilder by copying an existing snow instance.
   * @param other The existing instance to copy.
   * @return A new snow RecordBuilder
   */
  public static schemas.weather.snow.Builder newBuilder(schemas.weather.snow other) {
    if (other == null) {
      return new schemas.weather.snow.Builder();
    } else {
      return new schemas.weather.snow.Builder(other);
    }
  }

  /**
   * RecordBuilder for snow instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<snow>
    implements org.apache.avro.data.RecordBuilder<snow> {

    private java.lang.Float one_h;
    private java.lang.Float three_h;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(schemas.weather.snow.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.one_h)) {
        this.one_h = data().deepCopy(fields()[0].schema(), other.one_h);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.three_h)) {
        this.three_h = data().deepCopy(fields()[1].schema(), other.three_h);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
    }

    /**
     * Creates a Builder by copying an existing snow instance
     * @param other The existing instance to copy.
     */
    private Builder(schemas.weather.snow other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.one_h)) {
        this.one_h = data().deepCopy(fields()[0].schema(), other.one_h);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.three_h)) {
        this.three_h = data().deepCopy(fields()[1].schema(), other.three_h);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'one_h' field.
      * @return The value.
      */
    public java.lang.Float getOneH() {
      return one_h;
    }


    /**
      * Sets the value of the 'one_h' field.
      * @param value The value of 'one_h'.
      * @return This builder.
      */
    public schemas.weather.snow.Builder setOneH(java.lang.Float value) {
      validate(fields()[0], value);
      this.one_h = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'one_h' field has been set.
      * @return True if the 'one_h' field has been set, false otherwise.
      */
    public boolean hasOneH() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'one_h' field.
      * @return This builder.
      */
    public schemas.weather.snow.Builder clearOneH() {
      one_h = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'three_h' field.
      * @return The value.
      */
    public java.lang.Float getThreeH() {
      return three_h;
    }


    /**
      * Sets the value of the 'three_h' field.
      * @param value The value of 'three_h'.
      * @return This builder.
      */
    public schemas.weather.snow.Builder setThreeH(java.lang.Float value) {
      validate(fields()[1], value);
      this.three_h = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'three_h' field has been set.
      * @return True if the 'three_h' field has been set, false otherwise.
      */
    public boolean hasThreeH() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'three_h' field.
      * @return This builder.
      */
    public schemas.weather.snow.Builder clearThreeH() {
      three_h = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public snow build() {
      try {
        snow record = new snow();
        record.one_h = fieldSetFlags()[0] ? this.one_h : (java.lang.Float) defaultValue(fields()[0]);
        record.three_h = fieldSetFlags()[1] ? this.three_h : (java.lang.Float) defaultValue(fields()[1]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<snow>
    WRITER$ = (org.apache.avro.io.DatumWriter<snow>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<snow>
    READER$ = (org.apache.avro.io.DatumReader<snow>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.one_h == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeFloat(this.one_h);
    }

    if (this.three_h == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeFloat(this.three_h);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.one_h = null;
      } else {
        this.one_h = in.readFloat();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.three_h = null;
      } else {
        this.three_h = in.readFloat();
      }

    } else {
      for (int i = 0; i < 2; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.one_h = null;
          } else {
            this.one_h = in.readFloat();
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.three_h = null;
          } else {
            this.three_h = in.readFloat();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










