/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package schemas.race;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class race extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7520316680912812464L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"race\",\"namespace\":\"schemas.race\",\"fields\":[{\"name\":\"Place\",\"type\":\"int\"},{\"name\":\"Name\",\"type\":\"string\"},{\"name\":\"Year\",\"type\":\"string\"},{\"name\":\"Team\",\"type\":\"string\"},{\"name\":\"AverageMile\",\"type\":\"string\"},{\"name\":\"Time\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<race> ENCODER =
      new BinaryMessageEncoder<race>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<race> DECODER =
      new BinaryMessageDecoder<race>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<race> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<race> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<race> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<race>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this race to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a race from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a race instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static race fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private int Place;
   private java.lang.CharSequence Name;
   private java.lang.CharSequence Year;
   private java.lang.CharSequence Team;
   private java.lang.CharSequence AverageMile;
   private java.lang.CharSequence Time;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public race() {}

  /**
   * All-args constructor.
   * @param Place The new value for Place
   * @param Name The new value for Name
   * @param Year The new value for Year
   * @param Team The new value for Team
   * @param AverageMile The new value for AverageMile
   * @param Time The new value for Time
   */
  public race(java.lang.Integer Place, java.lang.CharSequence Name, java.lang.CharSequence Year, java.lang.CharSequence Team, java.lang.CharSequence AverageMile, java.lang.CharSequence Time) {
    this.Place = Place;
    this.Name = Name;
    this.Year = Year;
    this.Team = Team;
    this.AverageMile = AverageMile;
    this.Time = Time;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return Place;
    case 1: return Name;
    case 2: return Year;
    case 3: return Team;
    case 4: return AverageMile;
    case 5: return Time;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: Place = (java.lang.Integer)value$; break;
    case 1: Name = (java.lang.CharSequence)value$; break;
    case 2: Year = (java.lang.CharSequence)value$; break;
    case 3: Team = (java.lang.CharSequence)value$; break;
    case 4: AverageMile = (java.lang.CharSequence)value$; break;
    case 5: Time = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'Place' field.
   * @return The value of the 'Place' field.
   */
  public int getPlace() {
    return Place;
  }


  /**
   * Sets the value of the 'Place' field.
   * @param value the value to set.
   */
  public void setPlace(int value) {
    this.Place = value;
  }

  /**
   * Gets the value of the 'Name' field.
   * @return The value of the 'Name' field.
   */
  public java.lang.CharSequence getName() {
    return Name;
  }


  /**
   * Sets the value of the 'Name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.Name = value;
  }

  /**
   * Gets the value of the 'Year' field.
   * @return The value of the 'Year' field.
   */
  public java.lang.CharSequence getYear() {
    return Year;
  }


  /**
   * Sets the value of the 'Year' field.
   * @param value the value to set.
   */
  public void setYear(java.lang.CharSequence value) {
    this.Year = value;
  }

  /**
   * Gets the value of the 'Team' field.
   * @return The value of the 'Team' field.
   */
  public java.lang.CharSequence getTeam() {
    return Team;
  }


  /**
   * Sets the value of the 'Team' field.
   * @param value the value to set.
   */
  public void setTeam(java.lang.CharSequence value) {
    this.Team = value;
  }

  /**
   * Gets the value of the 'AverageMile' field.
   * @return The value of the 'AverageMile' field.
   */
  public java.lang.CharSequence getAverageMile() {
    return AverageMile;
  }


  /**
   * Sets the value of the 'AverageMile' field.
   * @param value the value to set.
   */
  public void setAverageMile(java.lang.CharSequence value) {
    this.AverageMile = value;
  }

  /**
   * Gets the value of the 'Time' field.
   * @return The value of the 'Time' field.
   */
  public java.lang.CharSequence getTime() {
    return Time;
  }


  /**
   * Sets the value of the 'Time' field.
   * @param value the value to set.
   */
  public void setTime(java.lang.CharSequence value) {
    this.Time = value;
  }

  /**
   * Creates a new race RecordBuilder.
   * @return A new race RecordBuilder
   */
  public static schemas.race.race.Builder newBuilder() {
    return new schemas.race.race.Builder();
  }

  /**
   * Creates a new race RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new race RecordBuilder
   */
  public static schemas.race.race.Builder newBuilder(schemas.race.race.Builder other) {
    if (other == null) {
      return new schemas.race.race.Builder();
    } else {
      return new schemas.race.race.Builder(other);
    }
  }

  /**
   * Creates a new race RecordBuilder by copying an existing race instance.
   * @param other The existing instance to copy.
   * @return A new race RecordBuilder
   */
  public static schemas.race.race.Builder newBuilder(schemas.race.race other) {
    if (other == null) {
      return new schemas.race.race.Builder();
    } else {
      return new schemas.race.race.Builder(other);
    }
  }

  /**
   * RecordBuilder for race instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<race>
    implements org.apache.avro.data.RecordBuilder<race> {

    private int Place;
    private java.lang.CharSequence Name;
    private java.lang.CharSequence Year;
    private java.lang.CharSequence Team;
    private java.lang.CharSequence AverageMile;
    private java.lang.CharSequence Time;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(schemas.race.race.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.Place)) {
        this.Place = data().deepCopy(fields()[0].schema(), other.Place);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.Name)) {
        this.Name = data().deepCopy(fields()[1].schema(), other.Name);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.Year)) {
        this.Year = data().deepCopy(fields()[2].schema(), other.Year);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.Team)) {
        this.Team = data().deepCopy(fields()[3].schema(), other.Team);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.AverageMile)) {
        this.AverageMile = data().deepCopy(fields()[4].schema(), other.AverageMile);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.Time)) {
        this.Time = data().deepCopy(fields()[5].schema(), other.Time);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing race instance
     * @param other The existing instance to copy.
     */
    private Builder(schemas.race.race other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.Place)) {
        this.Place = data().deepCopy(fields()[0].schema(), other.Place);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.Name)) {
        this.Name = data().deepCopy(fields()[1].schema(), other.Name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.Year)) {
        this.Year = data().deepCopy(fields()[2].schema(), other.Year);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.Team)) {
        this.Team = data().deepCopy(fields()[3].schema(), other.Team);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.AverageMile)) {
        this.AverageMile = data().deepCopy(fields()[4].schema(), other.AverageMile);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.Time)) {
        this.Time = data().deepCopy(fields()[5].schema(), other.Time);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'Place' field.
      * @return The value.
      */
    public int getPlace() {
      return Place;
    }


    /**
      * Sets the value of the 'Place' field.
      * @param value The value of 'Place'.
      * @return This builder.
      */
    public schemas.race.race.Builder setPlace(int value) {
      validate(fields()[0], value);
      this.Place = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'Place' field has been set.
      * @return True if the 'Place' field has been set, false otherwise.
      */
    public boolean hasPlace() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'Place' field.
      * @return This builder.
      */
    public schemas.race.race.Builder clearPlace() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'Name' field.
      * @return The value.
      */
    public java.lang.CharSequence getName() {
      return Name;
    }


    /**
      * Sets the value of the 'Name' field.
      * @param value The value of 'Name'.
      * @return This builder.
      */
    public schemas.race.race.Builder setName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.Name = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'Name' field has been set.
      * @return True if the 'Name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'Name' field.
      * @return This builder.
      */
    public schemas.race.race.Builder clearName() {
      Name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'Year' field.
      * @return The value.
      */
    public java.lang.CharSequence getYear() {
      return Year;
    }


    /**
      * Sets the value of the 'Year' field.
      * @param value The value of 'Year'.
      * @return This builder.
      */
    public schemas.race.race.Builder setYear(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.Year = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'Year' field has been set.
      * @return True if the 'Year' field has been set, false otherwise.
      */
    public boolean hasYear() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'Year' field.
      * @return This builder.
      */
    public schemas.race.race.Builder clearYear() {
      Year = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'Team' field.
      * @return The value.
      */
    public java.lang.CharSequence getTeam() {
      return Team;
    }


    /**
      * Sets the value of the 'Team' field.
      * @param value The value of 'Team'.
      * @return This builder.
      */
    public schemas.race.race.Builder setTeam(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.Team = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'Team' field has been set.
      * @return True if the 'Team' field has been set, false otherwise.
      */
    public boolean hasTeam() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'Team' field.
      * @return This builder.
      */
    public schemas.race.race.Builder clearTeam() {
      Team = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'AverageMile' field.
      * @return The value.
      */
    public java.lang.CharSequence getAverageMile() {
      return AverageMile;
    }


    /**
      * Sets the value of the 'AverageMile' field.
      * @param value The value of 'AverageMile'.
      * @return This builder.
      */
    public schemas.race.race.Builder setAverageMile(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.AverageMile = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'AverageMile' field has been set.
      * @return True if the 'AverageMile' field has been set, false otherwise.
      */
    public boolean hasAverageMile() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'AverageMile' field.
      * @return This builder.
      */
    public schemas.race.race.Builder clearAverageMile() {
      AverageMile = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'Time' field.
      * @return The value.
      */
    public java.lang.CharSequence getTime() {
      return Time;
    }


    /**
      * Sets the value of the 'Time' field.
      * @param value The value of 'Time'.
      * @return This builder.
      */
    public schemas.race.race.Builder setTime(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.Time = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'Time' field has been set.
      * @return True if the 'Time' field has been set, false otherwise.
      */
    public boolean hasTime() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'Time' field.
      * @return This builder.
      */
    public schemas.race.race.Builder clearTime() {
      Time = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public race build() {
      try {
        race record = new race();
        record.Place = fieldSetFlags()[0] ? this.Place : (java.lang.Integer) defaultValue(fields()[0]);
        record.Name = fieldSetFlags()[1] ? this.Name : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.Year = fieldSetFlags()[2] ? this.Year : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.Team = fieldSetFlags()[3] ? this.Team : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.AverageMile = fieldSetFlags()[4] ? this.AverageMile : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.Time = fieldSetFlags()[5] ? this.Time : (java.lang.CharSequence) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<race>
    WRITER$ = (org.apache.avro.io.DatumWriter<race>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<race>
    READER$ = (org.apache.avro.io.DatumReader<race>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeInt(this.Place);

    out.writeString(this.Name);

    out.writeString(this.Year);

    out.writeString(this.Team);

    out.writeString(this.AverageMile);

    out.writeString(this.Time);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.Place = in.readInt();

      this.Name = in.readString(this.Name instanceof Utf8 ? (Utf8)this.Name : null);

      this.Year = in.readString(this.Year instanceof Utf8 ? (Utf8)this.Year : null);

      this.Team = in.readString(this.Team instanceof Utf8 ? (Utf8)this.Team : null);

      this.AverageMile = in.readString(this.AverageMile instanceof Utf8 ? (Utf8)this.AverageMile : null);

      this.Time = in.readString(this.Time instanceof Utf8 ? (Utf8)this.Time : null);

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.Place = in.readInt();
          break;

        case 1:
          this.Name = in.readString(this.Name instanceof Utf8 ? (Utf8)this.Name : null);
          break;

        case 2:
          this.Year = in.readString(this.Year instanceof Utf8 ? (Utf8)this.Year : null);
          break;

        case 3:
          this.Team = in.readString(this.Team instanceof Utf8 ? (Utf8)this.Team : null);
          break;

        case 4:
          this.AverageMile = in.readString(this.AverageMile instanceof Utf8 ? (Utf8)this.AverageMile : null);
          break;

        case 5:
          this.Time = in.readString(this.Time instanceof Utf8 ? (Utf8)this.Time : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










