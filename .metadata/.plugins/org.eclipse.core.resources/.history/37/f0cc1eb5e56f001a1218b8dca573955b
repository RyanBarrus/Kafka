package com.kafka;

import java.time.Duration;
import java.util.Arrays;
import java.util.Collections;
import java.util.Properties;
import org.apache.kafka.clients.consumer.Consumer;
import org.apache.kafka.clients.consumer.ConsumerConfig;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.clients.consumer.KafkaConsumer;
import org.apache.kafka.common.serialization.LongDeserializer;
import org.apache.kafka.common.serialization.StringDeserializer;
import org.apache.log4j.BasicConfigurator;
import org.apache.log4j.Logger;
import org.slf4j.LoggerFactory;
import org.apache.kafka.clients.consumer.ConsumerRecords;
import org.apache.kafka.common.config.SaslConfigs;

public class WeatherConsume {
	
	
	public void print(String input)  {
		System.out.println(input);
	}
	
	private static final org.slf4j.Logger LOGGER = LoggerFactory.getLogger(WeatherConsume.class);

	public static void main(String[] args) {
        Properties props = new Properties();
        props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, IKafkaConstants.KAFKA_BROKERS);
        props.put(ConsumerConfig.GROUP_ID_CONFIG, IKafkaConstants.GROUP_ID_CONFIG);
        props.put(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG, "false");
        props.put(SaslConfigs.SASL_MECHANISM, IKafkaConstants.SASL_MECHANISM);
        props.put(SaslConfigs.SASL_JAAS_CONFIG, IKafkaConstants.SASL_JAAS_CONFIG);
        props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, "org.apache.kafka.common.serialization.StringDeserializer");
        props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, "org.apache.kafka.common.serialization.StringDeserializer");
        KafkaConsumer<String, String> consumer = new KafkaConsumer<String, String>(props);
        consumer.subscribe(Arrays.asList("Training"));
        
        System.out.println("Consumer Created");
        
        System.out.println(consumer.listTopics(Duration.ofMillis(1000)));
        
        System.out.println("Topics Listed");

        try {
			while (true) {
				ConsumerRecords<String, String> records = consumer.poll(Duration.ofMillis(1000));
				for (ConsumerRecord<String, String> record : records)
				System.out.println(record.toString());
			}
		} catch (Exception e) {
			LOGGER.error("Exception occured while consuming messages", e);
		}finally {
			consumer.close();
		}
        
        
      
    }
	
}
