/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package schemas.weather;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class weather extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8176051934083112450L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"weather\",\"namespace\":\"schemas.weather\",\"fields\":[{\"name\":\"base\",\"type\":\"string\"},{\"name\":\"clouds\",\"type\":{\"type\":\"record\",\"name\":\"clouds\",\"fields\":[{\"name\":\"all\",\"type\":\"int\"}]}},{\"name\":\"cod\",\"type\":\"int\"},{\"name\":\"coord\",\"type\":{\"type\":\"record\",\"name\":\"coord\",\"fields\":[{\"name\":\"lat\",\"type\":\"float\"},{\"name\":\"lon\",\"type\":\"float\"}]}},{\"name\":\"snow\",\"type\":{\"type\":\"record\",\"name\":\"snow\",\"fields\":[{\"name\":\"one_h\",\"type\":[\"null\",\"float\"],\"default\":null},{\"name\":\"three_h\",\"type\":[\"null\",\"float\"],\"default\":null}]},\"default\":{\"one_h\":null,\"three_h\":null}},{\"name\":\"rain\",\"type\":{\"type\":\"record\",\"name\":\"rain\",\"fields\":[{\"name\":\"one_h\",\"type\":[\"null\",\"float\"],\"default\":null},{\"name\":\"three_h\",\"type\":[\"null\",\"float\"],\"default\":null}]},\"default\":{\"one_h\":null,\"three_h\":null}},{\"name\":\"dt\",\"type\":\"int\"},{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"main\",\"type\":{\"type\":\"record\",\"name\":\"main\",\"fields\":[{\"name\":\"feels_like\",\"type\":\"float\"},{\"name\":\"humidity\",\"type\":\"int\"},{\"name\":\"pressure\",\"type\":\"int\"},{\"name\":\"sea_level\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"grnd_level\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"temp\",\"type\":\"float\"},{\"name\":\"temp_max\",\"type\":\"float\"},{\"name\":\"temp_min\",\"type\":\"float\"}]}},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"sys\",\"type\":{\"type\":\"record\",\"name\":\"sys\",\"fields\":[{\"name\":\"country\",\"type\":\"string\"},{\"name\":\"id\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"message\",\"type\":[\"null\",\"float\"],\"default\":null},{\"name\":\"sunrise\",\"type\":\"int\"},{\"name\":\"sunset\",\"type\":\"int\"},{\"name\":\"type\",\"type\":[\"null\",\"int\"],\"default\":null}]}},{\"name\":\"timezone\",\"type\":\"int\"},{\"name\":\"visibility\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"weather\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"weather_record\",\"fields\":[{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"icon\",\"type\":\"string\"},{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"main\",\"type\":\"string\"}]}}},{\"name\":\"wind\",\"type\":{\"type\":\"record\",\"name\":\"wind\",\"fields\":[{\"name\":\"deg\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"speed\",\"type\":\"float\"}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<weather> ENCODER =
      new BinaryMessageEncoder<weather>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<weather> DECODER =
      new BinaryMessageDecoder<weather>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<weather> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<weather> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<weather> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<weather>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this weather to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a weather from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a weather instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static weather fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.CharSequence base;
   private schemas.weather.clouds clouds;
   private int cod;
   private schemas.weather.coord coord;
   private schemas.weather.snow snow;
   private schemas.weather.rain rain;
   private int dt;
   private int id;
   private schemas.weather.main main;
   private java.lang.CharSequence name;
   private schemas.weather.sys sys;
   private int timezone;
   private java.lang.Integer visibility;
   private java.util.List<schemas.weather.weather_record> weather;
   private schemas.weather.wind wind;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public weather() {}

  /**
   * All-args constructor.
   * @param base The new value for base
   * @param clouds The new value for clouds
   * @param cod The new value for cod
   * @param coord The new value for coord
   * @param snow The new value for snow
   * @param rain The new value for rain
   * @param dt The new value for dt
   * @param id The new value for id
   * @param main The new value for main
   * @param name The new value for name
   * @param sys The new value for sys
   * @param timezone The new value for timezone
   * @param visibility The new value for visibility
   * @param weather The new value for weather
   * @param wind The new value for wind
   */
  public weather(java.lang.CharSequence base, schemas.weather.clouds clouds, java.lang.Integer cod, schemas.weather.coord coord, schemas.weather.snow snow, schemas.weather.rain rain, java.lang.Integer dt, java.lang.Integer id, schemas.weather.main main, java.lang.CharSequence name, schemas.weather.sys sys, java.lang.Integer timezone, java.lang.Integer visibility, java.util.List<schemas.weather.weather_record> weather, schemas.weather.wind wind) {
    this.base = base;
    this.clouds = clouds;
    this.cod = cod;
    this.coord = coord;
    this.snow = snow;
    this.rain = rain;
    this.dt = dt;
    this.id = id;
    this.main = main;
    this.name = name;
    this.sys = sys;
    this.timezone = timezone;
    this.visibility = visibility;
    this.weather = weather;
    this.wind = wind;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return base;
    case 1: return clouds;
    case 2: return cod;
    case 3: return coord;
    case 4: return snow;
    case 5: return rain;
    case 6: return dt;
    case 7: return id;
    case 8: return main;
    case 9: return name;
    case 10: return sys;
    case 11: return timezone;
    case 12: return visibility;
    case 13: return weather;
    case 14: return wind;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: base = (java.lang.CharSequence)value$; break;
    case 1: clouds = (schemas.weather.clouds)value$; break;
    case 2: cod = (java.lang.Integer)value$; break;
    case 3: coord = (schemas.weather.coord)value$; break;
    case 4: snow = (schemas.weather.snow)value$; break;
    case 5: rain = (schemas.weather.rain)value$; break;
    case 6: dt = (java.lang.Integer)value$; break;
    case 7: id = (java.lang.Integer)value$; break;
    case 8: main = (schemas.weather.main)value$; break;
    case 9: name = (java.lang.CharSequence)value$; break;
    case 10: sys = (schemas.weather.sys)value$; break;
    case 11: timezone = (java.lang.Integer)value$; break;
    case 12: visibility = (java.lang.Integer)value$; break;
    case 13: weather = (java.util.List<schemas.weather.weather_record>)value$; break;
    case 14: wind = (schemas.weather.wind)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'base' field.
   * @return The value of the 'base' field.
   */
  public java.lang.CharSequence getBase() {
    return base;
  }


  /**
   * Sets the value of the 'base' field.
   * @param value the value to set.
   */
  public void setBase(java.lang.CharSequence value) {
    this.base = value;
  }

  /**
   * Gets the value of the 'clouds' field.
   * @return The value of the 'clouds' field.
   */
  public schemas.weather.clouds getClouds() {
    return clouds;
  }


  /**
   * Sets the value of the 'clouds' field.
   * @param value the value to set.
   */
  public void setClouds(schemas.weather.clouds value) {
    this.clouds = value;
  }

  /**
   * Gets the value of the 'cod' field.
   * @return The value of the 'cod' field.
   */
  public int getCod() {
    return cod;
  }


  /**
   * Sets the value of the 'cod' field.
   * @param value the value to set.
   */
  public void setCod(int value) {
    this.cod = value;
  }

  /**
   * Gets the value of the 'coord' field.
   * @return The value of the 'coord' field.
   */
  public schemas.weather.coord getCoord() {
    return coord;
  }


  /**
   * Sets the value of the 'coord' field.
   * @param value the value to set.
   */
  public void setCoord(schemas.weather.coord value) {
    this.coord = value;
  }

  /**
   * Gets the value of the 'snow' field.
   * @return The value of the 'snow' field.
   */
  public schemas.weather.snow getSnow() {
    return snow;
  }


  /**
   * Sets the value of the 'snow' field.
   * @param value the value to set.
   */
  public void setSnow(schemas.weather.snow value) {
    this.snow = value;
  }

  /**
   * Gets the value of the 'rain' field.
   * @return The value of the 'rain' field.
   */
  public schemas.weather.rain getRain() {
    return rain;
  }


  /**
   * Sets the value of the 'rain' field.
   * @param value the value to set.
   */
  public void setRain(schemas.weather.rain value) {
    this.rain = value;
  }

  /**
   * Gets the value of the 'dt' field.
   * @return The value of the 'dt' field.
   */
  public int getDt() {
    return dt;
  }


  /**
   * Sets the value of the 'dt' field.
   * @param value the value to set.
   */
  public void setDt(int value) {
    this.dt = value;
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public int getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(int value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'main' field.
   * @return The value of the 'main' field.
   */
  public schemas.weather.main getMain() {
    return main;
  }


  /**
   * Sets the value of the 'main' field.
   * @param value the value to set.
   */
  public void setMain(schemas.weather.main value) {
    this.main = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.CharSequence getName() {
    return name;
  }


  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'sys' field.
   * @return The value of the 'sys' field.
   */
  public schemas.weather.sys getSys() {
    return sys;
  }


  /**
   * Sets the value of the 'sys' field.
   * @param value the value to set.
   */
  public void setSys(schemas.weather.sys value) {
    this.sys = value;
  }

  /**
   * Gets the value of the 'timezone' field.
   * @return The value of the 'timezone' field.
   */
  public int getTimezone() {
    return timezone;
  }


  /**
   * Sets the value of the 'timezone' field.
   * @param value the value to set.
   */
  public void setTimezone(int value) {
    this.timezone = value;
  }

  /**
   * Gets the value of the 'visibility' field.
   * @return The value of the 'visibility' field.
   */
  public java.lang.Integer getVisibility() {
    return visibility;
  }


  /**
   * Sets the value of the 'visibility' field.
   * @param value the value to set.
   */
  public void setVisibility(java.lang.Integer value) {
    this.visibility = value;
  }

  /**
   * Gets the value of the 'weather' field.
   * @return The value of the 'weather' field.
   */
  public java.util.List<schemas.weather.weather_record> getWeather() {
    return weather;
  }


  /**
   * Sets the value of the 'weather' field.
   * @param value the value to set.
   */
  public void setWeather(java.util.List<schemas.weather.weather_record> value) {
    this.weather = value;
  }

  /**
   * Gets the value of the 'wind' field.
   * @return The value of the 'wind' field.
   */
  public schemas.weather.wind getWind() {
    return wind;
  }


  /**
   * Sets the value of the 'wind' field.
   * @param value the value to set.
   */
  public void setWind(schemas.weather.wind value) {
    this.wind = value;
  }

  /**
   * Creates a new weather RecordBuilder.
   * @return A new weather RecordBuilder
   */
  public static schemas.weather.weather.Builder newBuilder() {
    return new schemas.weather.weather.Builder();
  }

  /**
   * Creates a new weather RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new weather RecordBuilder
   */
  public static schemas.weather.weather.Builder newBuilder(schemas.weather.weather.Builder other) {
    if (other == null) {
      return new schemas.weather.weather.Builder();
    } else {
      return new schemas.weather.weather.Builder(other);
    }
  }

  /**
   * Creates a new weather RecordBuilder by copying an existing weather instance.
   * @param other The existing instance to copy.
   * @return A new weather RecordBuilder
   */
  public static schemas.weather.weather.Builder newBuilder(schemas.weather.weather other) {
    if (other == null) {
      return new schemas.weather.weather.Builder();
    } else {
      return new schemas.weather.weather.Builder(other);
    }
  }

  /**
   * RecordBuilder for weather instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<weather>
    implements org.apache.avro.data.RecordBuilder<weather> {

    private java.lang.CharSequence base;
    private schemas.weather.clouds clouds;
    private schemas.weather.clouds.Builder cloudsBuilder;
    private int cod;
    private schemas.weather.coord coord;
    private schemas.weather.coord.Builder coordBuilder;
    private schemas.weather.snow snow;
    private schemas.weather.snow.Builder snowBuilder;
    private schemas.weather.rain rain;
    private schemas.weather.rain.Builder rainBuilder;
    private int dt;
    private int id;
    private schemas.weather.main main;
    private schemas.weather.main.Builder mainBuilder;
    private java.lang.CharSequence name;
    private schemas.weather.sys sys;
    private schemas.weather.sys.Builder sysBuilder;
    private int timezone;
    private java.lang.Integer visibility;
    private java.util.List<schemas.weather.weather_record> weather;
    private schemas.weather.wind wind;
    private schemas.weather.wind.Builder windBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(schemas.weather.weather.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.base)) {
        this.base = data().deepCopy(fields()[0].schema(), other.base);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.clouds)) {
        this.clouds = data().deepCopy(fields()[1].schema(), other.clouds);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (other.hasCloudsBuilder()) {
        this.cloudsBuilder = schemas.weather.clouds.newBuilder(other.getCloudsBuilder());
      }
      if (isValidValue(fields()[2], other.cod)) {
        this.cod = data().deepCopy(fields()[2].schema(), other.cod);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.coord)) {
        this.coord = data().deepCopy(fields()[3].schema(), other.coord);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (other.hasCoordBuilder()) {
        this.coordBuilder = schemas.weather.coord.newBuilder(other.getCoordBuilder());
      }
      if (isValidValue(fields()[4], other.snow)) {
        this.snow = data().deepCopy(fields()[4].schema(), other.snow);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (other.hasSnowBuilder()) {
        this.snowBuilder = schemas.weather.snow.newBuilder(other.getSnowBuilder());
      }
      if (isValidValue(fields()[5], other.rain)) {
        this.rain = data().deepCopy(fields()[5].schema(), other.rain);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (other.hasRainBuilder()) {
        this.rainBuilder = schemas.weather.rain.newBuilder(other.getRainBuilder());
      }
      if (isValidValue(fields()[6], other.dt)) {
        this.dt = data().deepCopy(fields()[6].schema(), other.dt);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.id)) {
        this.id = data().deepCopy(fields()[7].schema(), other.id);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.main)) {
        this.main = data().deepCopy(fields()[8].schema(), other.main);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (other.hasMainBuilder()) {
        this.mainBuilder = schemas.weather.main.newBuilder(other.getMainBuilder());
      }
      if (isValidValue(fields()[9], other.name)) {
        this.name = data().deepCopy(fields()[9].schema(), other.name);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.sys)) {
        this.sys = data().deepCopy(fields()[10].schema(), other.sys);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (other.hasSysBuilder()) {
        this.sysBuilder = schemas.weather.sys.newBuilder(other.getSysBuilder());
      }
      if (isValidValue(fields()[11], other.timezone)) {
        this.timezone = data().deepCopy(fields()[11].schema(), other.timezone);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.visibility)) {
        this.visibility = data().deepCopy(fields()[12].schema(), other.visibility);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (isValidValue(fields()[13], other.weather)) {
        this.weather = data().deepCopy(fields()[13].schema(), other.weather);
        fieldSetFlags()[13] = other.fieldSetFlags()[13];
      }
      if (isValidValue(fields()[14], other.wind)) {
        this.wind = data().deepCopy(fields()[14].schema(), other.wind);
        fieldSetFlags()[14] = other.fieldSetFlags()[14];
      }
      if (other.hasWindBuilder()) {
        this.windBuilder = schemas.weather.wind.newBuilder(other.getWindBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing weather instance
     * @param other The existing instance to copy.
     */
    private Builder(schemas.weather.weather other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.base)) {
        this.base = data().deepCopy(fields()[0].schema(), other.base);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.clouds)) {
        this.clouds = data().deepCopy(fields()[1].schema(), other.clouds);
        fieldSetFlags()[1] = true;
      }
      this.cloudsBuilder = null;
      if (isValidValue(fields()[2], other.cod)) {
        this.cod = data().deepCopy(fields()[2].schema(), other.cod);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.coord)) {
        this.coord = data().deepCopy(fields()[3].schema(), other.coord);
        fieldSetFlags()[3] = true;
      }
      this.coordBuilder = null;
      if (isValidValue(fields()[4], other.snow)) {
        this.snow = data().deepCopy(fields()[4].schema(), other.snow);
        fieldSetFlags()[4] = true;
      }
      this.snowBuilder = null;
      if (isValidValue(fields()[5], other.rain)) {
        this.rain = data().deepCopy(fields()[5].schema(), other.rain);
        fieldSetFlags()[5] = true;
      }
      this.rainBuilder = null;
      if (isValidValue(fields()[6], other.dt)) {
        this.dt = data().deepCopy(fields()[6].schema(), other.dt);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.id)) {
        this.id = data().deepCopy(fields()[7].schema(), other.id);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.main)) {
        this.main = data().deepCopy(fields()[8].schema(), other.main);
        fieldSetFlags()[8] = true;
      }
      this.mainBuilder = null;
      if (isValidValue(fields()[9], other.name)) {
        this.name = data().deepCopy(fields()[9].schema(), other.name);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.sys)) {
        this.sys = data().deepCopy(fields()[10].schema(), other.sys);
        fieldSetFlags()[10] = true;
      }
      this.sysBuilder = null;
      if (isValidValue(fields()[11], other.timezone)) {
        this.timezone = data().deepCopy(fields()[11].schema(), other.timezone);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.visibility)) {
        this.visibility = data().deepCopy(fields()[12].schema(), other.visibility);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.weather)) {
        this.weather = data().deepCopy(fields()[13].schema(), other.weather);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.wind)) {
        this.wind = data().deepCopy(fields()[14].schema(), other.wind);
        fieldSetFlags()[14] = true;
      }
      this.windBuilder = null;
    }

    /**
      * Gets the value of the 'base' field.
      * @return The value.
      */
    public java.lang.CharSequence getBase() {
      return base;
    }


    /**
      * Sets the value of the 'base' field.
      * @param value The value of 'base'.
      * @return This builder.
      */
    public schemas.weather.weather.Builder setBase(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.base = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'base' field has been set.
      * @return True if the 'base' field has been set, false otherwise.
      */
    public boolean hasBase() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'base' field.
      * @return This builder.
      */
    public schemas.weather.weather.Builder clearBase() {
      base = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'clouds' field.
      * @return The value.
      */
    public schemas.weather.clouds getClouds() {
      return clouds;
    }


    /**
      * Sets the value of the 'clouds' field.
      * @param value The value of 'clouds'.
      * @return This builder.
      */
    public schemas.weather.weather.Builder setClouds(schemas.weather.clouds value) {
      validate(fields()[1], value);
      this.cloudsBuilder = null;
      this.clouds = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'clouds' field has been set.
      * @return True if the 'clouds' field has been set, false otherwise.
      */
    public boolean hasClouds() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'clouds' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public schemas.weather.clouds.Builder getCloudsBuilder() {
      if (cloudsBuilder == null) {
        if (hasClouds()) {
          setCloudsBuilder(schemas.weather.clouds.newBuilder(clouds));
        } else {
          setCloudsBuilder(schemas.weather.clouds.newBuilder());
        }
      }
      return cloudsBuilder;
    }

    /**
     * Sets the Builder instance for the 'clouds' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public schemas.weather.weather.Builder setCloudsBuilder(schemas.weather.clouds.Builder value) {
      clearClouds();
      cloudsBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'clouds' field has an active Builder instance
     * @return True if the 'clouds' field has an active Builder instance
     */
    public boolean hasCloudsBuilder() {
      return cloudsBuilder != null;
    }

    /**
      * Clears the value of the 'clouds' field.
      * @return This builder.
      */
    public schemas.weather.weather.Builder clearClouds() {
      clouds = null;
      cloudsBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'cod' field.
      * @return The value.
      */
    public int getCod() {
      return cod;
    }


    /**
      * Sets the value of the 'cod' field.
      * @param value The value of 'cod'.
      * @return This builder.
      */
    public schemas.weather.weather.Builder setCod(int value) {
      validate(fields()[2], value);
      this.cod = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'cod' field has been set.
      * @return True if the 'cod' field has been set, false otherwise.
      */
    public boolean hasCod() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'cod' field.
      * @return This builder.
      */
    public schemas.weather.weather.Builder clearCod() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'coord' field.
      * @return The value.
      */
    public schemas.weather.coord getCoord() {
      return coord;
    }


    /**
      * Sets the value of the 'coord' field.
      * @param value The value of 'coord'.
      * @return This builder.
      */
    public schemas.weather.weather.Builder setCoord(schemas.weather.coord value) {
      validate(fields()[3], value);
      this.coordBuilder = null;
      this.coord = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'coord' field has been set.
      * @return True if the 'coord' field has been set, false otherwise.
      */
    public boolean hasCoord() {
      return fieldSetFlags()[3];
    }

    /**
     * Gets the Builder instance for the 'coord' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public schemas.weather.coord.Builder getCoordBuilder() {
      if (coordBuilder == null) {
        if (hasCoord()) {
          setCoordBuilder(schemas.weather.coord.newBuilder(coord));
        } else {
          setCoordBuilder(schemas.weather.coord.newBuilder());
        }
      }
      return coordBuilder;
    }

    /**
     * Sets the Builder instance for the 'coord' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public schemas.weather.weather.Builder setCoordBuilder(schemas.weather.coord.Builder value) {
      clearCoord();
      coordBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'coord' field has an active Builder instance
     * @return True if the 'coord' field has an active Builder instance
     */
    public boolean hasCoordBuilder() {
      return coordBuilder != null;
    }

    /**
      * Clears the value of the 'coord' field.
      * @return This builder.
      */
    public schemas.weather.weather.Builder clearCoord() {
      coord = null;
      coordBuilder = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'snow' field.
      * @return The value.
      */
    public schemas.weather.snow getSnow() {
      return snow;
    }


    /**
      * Sets the value of the 'snow' field.
      * @param value The value of 'snow'.
      * @return This builder.
      */
    public schemas.weather.weather.Builder setSnow(schemas.weather.snow value) {
      validate(fields()[4], value);
      this.snowBuilder = null;
      this.snow = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'snow' field has been set.
      * @return True if the 'snow' field has been set, false otherwise.
      */
    public boolean hasSnow() {
      return fieldSetFlags()[4];
    }

    /**
     * Gets the Builder instance for the 'snow' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public schemas.weather.snow.Builder getSnowBuilder() {
      if (snowBuilder == null) {
        if (hasSnow()) {
          setSnowBuilder(schemas.weather.snow.newBuilder(snow));
        } else {
          setSnowBuilder(schemas.weather.snow.newBuilder());
        }
      }
      return snowBuilder;
    }

    /**
     * Sets the Builder instance for the 'snow' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public schemas.weather.weather.Builder setSnowBuilder(schemas.weather.snow.Builder value) {
      clearSnow();
      snowBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'snow' field has an active Builder instance
     * @return True if the 'snow' field has an active Builder instance
     */
    public boolean hasSnowBuilder() {
      return snowBuilder != null;
    }

    /**
      * Clears the value of the 'snow' field.
      * @return This builder.
      */
    public schemas.weather.weather.Builder clearSnow() {
      snow = null;
      snowBuilder = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'rain' field.
      * @return The value.
      */
    public schemas.weather.rain getRain() {
      return rain;
    }


    /**
      * Sets the value of the 'rain' field.
      * @param value The value of 'rain'.
      * @return This builder.
      */
    public schemas.weather.weather.Builder setRain(schemas.weather.rain value) {
      validate(fields()[5], value);
      this.rainBuilder = null;
      this.rain = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'rain' field has been set.
      * @return True if the 'rain' field has been set, false otherwise.
      */
    public boolean hasRain() {
      return fieldSetFlags()[5];
    }

    /**
     * Gets the Builder instance for the 'rain' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public schemas.weather.rain.Builder getRainBuilder() {
      if (rainBuilder == null) {
        if (hasRain()) {
          setRainBuilder(schemas.weather.rain.newBuilder(rain));
        } else {
          setRainBuilder(schemas.weather.rain.newBuilder());
        }
      }
      return rainBuilder;
    }

    /**
     * Sets the Builder instance for the 'rain' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public schemas.weather.weather.Builder setRainBuilder(schemas.weather.rain.Builder value) {
      clearRain();
      rainBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'rain' field has an active Builder instance
     * @return True if the 'rain' field has an active Builder instance
     */
    public boolean hasRainBuilder() {
      return rainBuilder != null;
    }

    /**
      * Clears the value of the 'rain' field.
      * @return This builder.
      */
    public schemas.weather.weather.Builder clearRain() {
      rain = null;
      rainBuilder = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'dt' field.
      * @return The value.
      */
    public int getDt() {
      return dt;
    }


    /**
      * Sets the value of the 'dt' field.
      * @param value The value of 'dt'.
      * @return This builder.
      */
    public schemas.weather.weather.Builder setDt(int value) {
      validate(fields()[6], value);
      this.dt = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'dt' field has been set.
      * @return True if the 'dt' field has been set, false otherwise.
      */
    public boolean hasDt() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'dt' field.
      * @return This builder.
      */
    public schemas.weather.weather.Builder clearDt() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public int getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public schemas.weather.weather.Builder setId(int value) {
      validate(fields()[7], value);
      this.id = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public schemas.weather.weather.Builder clearId() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'main' field.
      * @return The value.
      */
    public schemas.weather.main getMain() {
      return main;
    }


    /**
      * Sets the value of the 'main' field.
      * @param value The value of 'main'.
      * @return This builder.
      */
    public schemas.weather.weather.Builder setMain(schemas.weather.main value) {
      validate(fields()[8], value);
      this.mainBuilder = null;
      this.main = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'main' field has been set.
      * @return True if the 'main' field has been set, false otherwise.
      */
    public boolean hasMain() {
      return fieldSetFlags()[8];
    }

    /**
     * Gets the Builder instance for the 'main' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public schemas.weather.main.Builder getMainBuilder() {
      if (mainBuilder == null) {
        if (hasMain()) {
          setMainBuilder(schemas.weather.main.newBuilder(main));
        } else {
          setMainBuilder(schemas.weather.main.newBuilder());
        }
      }
      return mainBuilder;
    }

    /**
     * Sets the Builder instance for the 'main' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public schemas.weather.weather.Builder setMainBuilder(schemas.weather.main.Builder value) {
      clearMain();
      mainBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'main' field has an active Builder instance
     * @return True if the 'main' field has an active Builder instance
     */
    public boolean hasMainBuilder() {
      return mainBuilder != null;
    }

    /**
      * Clears the value of the 'main' field.
      * @return This builder.
      */
    public schemas.weather.weather.Builder clearMain() {
      main = null;
      mainBuilder = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.CharSequence getName() {
      return name;
    }


    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public schemas.weather.weather.Builder setName(java.lang.CharSequence value) {
      validate(fields()[9], value);
      this.name = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public schemas.weather.weather.Builder clearName() {
      name = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'sys' field.
      * @return The value.
      */
    public schemas.weather.sys getSys() {
      return sys;
    }


    /**
      * Sets the value of the 'sys' field.
      * @param value The value of 'sys'.
      * @return This builder.
      */
    public schemas.weather.weather.Builder setSys(schemas.weather.sys value) {
      validate(fields()[10], value);
      this.sysBuilder = null;
      this.sys = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'sys' field has been set.
      * @return True if the 'sys' field has been set, false otherwise.
      */
    public boolean hasSys() {
      return fieldSetFlags()[10];
    }

    /**
     * Gets the Builder instance for the 'sys' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public schemas.weather.sys.Builder getSysBuilder() {
      if (sysBuilder == null) {
        if (hasSys()) {
          setSysBuilder(schemas.weather.sys.newBuilder(sys));
        } else {
          setSysBuilder(schemas.weather.sys.newBuilder());
        }
      }
      return sysBuilder;
    }

    /**
     * Sets the Builder instance for the 'sys' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public schemas.weather.weather.Builder setSysBuilder(schemas.weather.sys.Builder value) {
      clearSys();
      sysBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'sys' field has an active Builder instance
     * @return True if the 'sys' field has an active Builder instance
     */
    public boolean hasSysBuilder() {
      return sysBuilder != null;
    }

    /**
      * Clears the value of the 'sys' field.
      * @return This builder.
      */
    public schemas.weather.weather.Builder clearSys() {
      sys = null;
      sysBuilder = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'timezone' field.
      * @return The value.
      */
    public int getTimezone() {
      return timezone;
    }


    /**
      * Sets the value of the 'timezone' field.
      * @param value The value of 'timezone'.
      * @return This builder.
      */
    public schemas.weather.weather.Builder setTimezone(int value) {
      validate(fields()[11], value);
      this.timezone = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'timezone' field has been set.
      * @return True if the 'timezone' field has been set, false otherwise.
      */
    public boolean hasTimezone() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'timezone' field.
      * @return This builder.
      */
    public schemas.weather.weather.Builder clearTimezone() {
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'visibility' field.
      * @return The value.
      */
    public java.lang.Integer getVisibility() {
      return visibility;
    }


    /**
      * Sets the value of the 'visibility' field.
      * @param value The value of 'visibility'.
      * @return This builder.
      */
    public schemas.weather.weather.Builder setVisibility(java.lang.Integer value) {
      validate(fields()[12], value);
      this.visibility = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'visibility' field has been set.
      * @return True if the 'visibility' field has been set, false otherwise.
      */
    public boolean hasVisibility() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'visibility' field.
      * @return This builder.
      */
    public schemas.weather.weather.Builder clearVisibility() {
      visibility = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'weather' field.
      * @return The value.
      */
    public java.util.List<schemas.weather.weather_record> getWeather() {
      return weather;
    }


    /**
      * Sets the value of the 'weather' field.
      * @param value The value of 'weather'.
      * @return This builder.
      */
    public schemas.weather.weather.Builder setWeather(java.util.List<schemas.weather.weather_record> value) {
      validate(fields()[13], value);
      this.weather = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'weather' field has been set.
      * @return True if the 'weather' field has been set, false otherwise.
      */
    public boolean hasWeather() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'weather' field.
      * @return This builder.
      */
    public schemas.weather.weather.Builder clearWeather() {
      weather = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'wind' field.
      * @return The value.
      */
    public schemas.weather.wind getWind() {
      return wind;
    }


    /**
      * Sets the value of the 'wind' field.
      * @param value The value of 'wind'.
      * @return This builder.
      */
    public schemas.weather.weather.Builder setWind(schemas.weather.wind value) {
      validate(fields()[14], value);
      this.windBuilder = null;
      this.wind = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'wind' field has been set.
      * @return True if the 'wind' field has been set, false otherwise.
      */
    public boolean hasWind() {
      return fieldSetFlags()[14];
    }

    /**
     * Gets the Builder instance for the 'wind' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public schemas.weather.wind.Builder getWindBuilder() {
      if (windBuilder == null) {
        if (hasWind()) {
          setWindBuilder(schemas.weather.wind.newBuilder(wind));
        } else {
          setWindBuilder(schemas.weather.wind.newBuilder());
        }
      }
      return windBuilder;
    }

    /**
     * Sets the Builder instance for the 'wind' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public schemas.weather.weather.Builder setWindBuilder(schemas.weather.wind.Builder value) {
      clearWind();
      windBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'wind' field has an active Builder instance
     * @return True if the 'wind' field has an active Builder instance
     */
    public boolean hasWindBuilder() {
      return windBuilder != null;
    }

    /**
      * Clears the value of the 'wind' field.
      * @return This builder.
      */
    public schemas.weather.weather.Builder clearWind() {
      wind = null;
      windBuilder = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public weather build() {
      try {
        weather record = new weather();
        record.base = fieldSetFlags()[0] ? this.base : (java.lang.CharSequence) defaultValue(fields()[0]);
        if (cloudsBuilder != null) {
          try {
            record.clouds = this.cloudsBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("clouds"));
            throw e;
          }
        } else {
          record.clouds = fieldSetFlags()[1] ? this.clouds : (schemas.weather.clouds) defaultValue(fields()[1]);
        }
        record.cod = fieldSetFlags()[2] ? this.cod : (java.lang.Integer) defaultValue(fields()[2]);
        if (coordBuilder != null) {
          try {
            record.coord = this.coordBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("coord"));
            throw e;
          }
        } else {
          record.coord = fieldSetFlags()[3] ? this.coord : (schemas.weather.coord) defaultValue(fields()[3]);
        }
        if (snowBuilder != null) {
          try {
            record.snow = this.snowBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("snow"));
            throw e;
          }
        } else {
          record.snow = fieldSetFlags()[4] ? this.snow : (schemas.weather.snow) defaultValue(fields()[4]);
        }
        if (rainBuilder != null) {
          try {
            record.rain = this.rainBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("rain"));
            throw e;
          }
        } else {
          record.rain = fieldSetFlags()[5] ? this.rain : (schemas.weather.rain) defaultValue(fields()[5]);
        }
        record.dt = fieldSetFlags()[6] ? this.dt : (java.lang.Integer) defaultValue(fields()[6]);
        record.id = fieldSetFlags()[7] ? this.id : (java.lang.Integer) defaultValue(fields()[7]);
        if (mainBuilder != null) {
          try {
            record.main = this.mainBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("main"));
            throw e;
          }
        } else {
          record.main = fieldSetFlags()[8] ? this.main : (schemas.weather.main) defaultValue(fields()[8]);
        }
        record.name = fieldSetFlags()[9] ? this.name : (java.lang.CharSequence) defaultValue(fields()[9]);
        if (sysBuilder != null) {
          try {
            record.sys = this.sysBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("sys"));
            throw e;
          }
        } else {
          record.sys = fieldSetFlags()[10] ? this.sys : (schemas.weather.sys) defaultValue(fields()[10]);
        }
        record.timezone = fieldSetFlags()[11] ? this.timezone : (java.lang.Integer) defaultValue(fields()[11]);
        record.visibility = fieldSetFlags()[12] ? this.visibility : (java.lang.Integer) defaultValue(fields()[12]);
        record.weather = fieldSetFlags()[13] ? this.weather : (java.util.List<schemas.weather.weather_record>) defaultValue(fields()[13]);
        if (windBuilder != null) {
          try {
            record.wind = this.windBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("wind"));
            throw e;
          }
        } else {
          record.wind = fieldSetFlags()[14] ? this.wind : (schemas.weather.wind) defaultValue(fields()[14]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<weather>
    WRITER$ = (org.apache.avro.io.DatumWriter<weather>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<weather>
    READER$ = (org.apache.avro.io.DatumReader<weather>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.base);

    this.clouds.customEncode(out);

    out.writeInt(this.cod);

    this.coord.customEncode(out);

    this.snow.customEncode(out);

    this.rain.customEncode(out);

    out.writeInt(this.dt);

    out.writeInt(this.id);

    this.main.customEncode(out);

    out.writeString(this.name);

    this.sys.customEncode(out);

    out.writeInt(this.timezone);

    if (this.visibility == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.visibility);
    }

    long size0 = this.weather.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (schemas.weather.weather_record e0: this.weather) {
      actualSize0++;
      out.startItem();
      e0.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    this.wind.customEncode(out);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.base = in.readString(this.base instanceof Utf8 ? (Utf8)this.base : null);

      if (this.clouds == null) {
        this.clouds = new schemas.weather.clouds();
      }
      this.clouds.customDecode(in);

      this.cod = in.readInt();

      if (this.coord == null) {
        this.coord = new schemas.weather.coord();
      }
      this.coord.customDecode(in);

      if (this.snow == null) {
        this.snow = new schemas.weather.snow();
      }
      this.snow.customDecode(in);

      if (this.rain == null) {
        this.rain = new schemas.weather.rain();
      }
      this.rain.customDecode(in);

      this.dt = in.readInt();

      this.id = in.readInt();

      if (this.main == null) {
        this.main = new schemas.weather.main();
      }
      this.main.customDecode(in);

      this.name = in.readString(this.name instanceof Utf8 ? (Utf8)this.name : null);

      if (this.sys == null) {
        this.sys = new schemas.weather.sys();
      }
      this.sys.customDecode(in);

      this.timezone = in.readInt();

      if (in.readIndex() != 1) {
        in.readNull();
        this.visibility = null;
      } else {
        this.visibility = in.readInt();
      }

      long size0 = in.readArrayStart();
      java.util.List<schemas.weather.weather_record> a0 = this.weather;
      if (a0 == null) {
        a0 = new SpecificData.Array<schemas.weather.weather_record>((int)size0, SCHEMA$.getField("weather").schema());
        this.weather = a0;
      } else a0.clear();
      SpecificData.Array<schemas.weather.weather_record> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<schemas.weather.weather_record>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          schemas.weather.weather_record e0 = (ga0 != null ? ga0.peek() : null);
          if (e0 == null) {
            e0 = new schemas.weather.weather_record();
          }
          e0.customDecode(in);
          a0.add(e0);
        }
      }

      if (this.wind == null) {
        this.wind = new schemas.weather.wind();
      }
      this.wind.customDecode(in);

    } else {
      for (int i = 0; i < 15; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.base = in.readString(this.base instanceof Utf8 ? (Utf8)this.base : null);
          break;

        case 1:
          if (this.clouds == null) {
            this.clouds = new schemas.weather.clouds();
          }
          this.clouds.customDecode(in);
          break;

        case 2:
          this.cod = in.readInt();
          break;

        case 3:
          if (this.coord == null) {
            this.coord = new schemas.weather.coord();
          }
          this.coord.customDecode(in);
          break;

        case 4:
          if (this.snow == null) {
            this.snow = new schemas.weather.snow();
          }
          this.snow.customDecode(in);
          break;

        case 5:
          if (this.rain == null) {
            this.rain = new schemas.weather.rain();
          }
          this.rain.customDecode(in);
          break;

        case 6:
          this.dt = in.readInt();
          break;

        case 7:
          this.id = in.readInt();
          break;

        case 8:
          if (this.main == null) {
            this.main = new schemas.weather.main();
          }
          this.main.customDecode(in);
          break;

        case 9:
          this.name = in.readString(this.name instanceof Utf8 ? (Utf8)this.name : null);
          break;

        case 10:
          if (this.sys == null) {
            this.sys = new schemas.weather.sys();
          }
          this.sys.customDecode(in);
          break;

        case 11:
          this.timezone = in.readInt();
          break;

        case 12:
          if (in.readIndex() != 1) {
            in.readNull();
            this.visibility = null;
          } else {
            this.visibility = in.readInt();
          }
          break;

        case 13:
          long size0 = in.readArrayStart();
          java.util.List<schemas.weather.weather_record> a0 = this.weather;
          if (a0 == null) {
            a0 = new SpecificData.Array<schemas.weather.weather_record>((int)size0, SCHEMA$.getField("weather").schema());
            this.weather = a0;
          } else a0.clear();
          SpecificData.Array<schemas.weather.weather_record> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<schemas.weather.weather_record>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              schemas.weather.weather_record e0 = (ga0 != null ? ga0.peek() : null);
              if (e0 == null) {
                e0 = new schemas.weather.weather_record();
              }
              e0.customDecode(in);
              a0.add(e0);
            }
          }
          break;

        case 14:
          if (this.wind == null) {
            this.wind = new schemas.weather.wind();
          }
          this.wind.customDecode(in);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










