/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package schemas.weather;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class main extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7451836955208758488L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"main\",\"namespace\":\"schemas.weather\",\"fields\":[{\"name\":\"feels_like\",\"type\":\"float\"},{\"name\":\"humidity\",\"type\":\"int\"},{\"name\":\"pressure\",\"type\":\"int\"},{\"name\":\"sea_level\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"grnd_level\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"temp\",\"type\":\"float\"},{\"name\":\"temp_max\",\"type\":\"float\"},{\"name\":\"temp_min\",\"type\":\"float\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<main> ENCODER =
      new BinaryMessageEncoder<main>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<main> DECODER =
      new BinaryMessageDecoder<main>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<main> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<main> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<main> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<main>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this main to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a main from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a main instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static main fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private float feels_like;
   private int humidity;
   private int pressure;
   private java.lang.Integer sea_level;
   private java.lang.Integer grnd_level;
   private float temp;
   private float temp_max;
   private float temp_min;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public main() {}

  /**
   * All-args constructor.
   * @param feels_like The new value for feels_like
   * @param humidity The new value for humidity
   * @param pressure The new value for pressure
   * @param sea_level The new value for sea_level
   * @param grnd_level The new value for grnd_level
   * @param temp The new value for temp
   * @param temp_max The new value for temp_max
   * @param temp_min The new value for temp_min
   */
  public main(java.lang.Float feels_like, java.lang.Integer humidity, java.lang.Integer pressure, java.lang.Integer sea_level, java.lang.Integer grnd_level, java.lang.Float temp, java.lang.Float temp_max, java.lang.Float temp_min) {
    this.feels_like = feels_like;
    this.humidity = humidity;
    this.pressure = pressure;
    this.sea_level = sea_level;
    this.grnd_level = grnd_level;
    this.temp = temp;
    this.temp_max = temp_max;
    this.temp_min = temp_min;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return feels_like;
    case 1: return humidity;
    case 2: return pressure;
    case 3: return sea_level;
    case 4: return grnd_level;
    case 5: return temp;
    case 6: return temp_max;
    case 7: return temp_min;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: feels_like = (java.lang.Float)value$; break;
    case 1: humidity = (java.lang.Integer)value$; break;
    case 2: pressure = (java.lang.Integer)value$; break;
    case 3: sea_level = (java.lang.Integer)value$; break;
    case 4: grnd_level = (java.lang.Integer)value$; break;
    case 5: temp = (java.lang.Float)value$; break;
    case 6: temp_max = (java.lang.Float)value$; break;
    case 7: temp_min = (java.lang.Float)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'feels_like' field.
   * @return The value of the 'feels_like' field.
   */
  public float getFeelsLike() {
    return feels_like;
  }


  /**
   * Sets the value of the 'feels_like' field.
   * @param value the value to set.
   */
  public void setFeelsLike(float value) {
    this.feels_like = value;
  }

  /**
   * Gets the value of the 'humidity' field.
   * @return The value of the 'humidity' field.
   */
  public int getHumidity() {
    return humidity;
  }


  /**
   * Sets the value of the 'humidity' field.
   * @param value the value to set.
   */
  public void setHumidity(int value) {
    this.humidity = value;
  }

  /**
   * Gets the value of the 'pressure' field.
   * @return The value of the 'pressure' field.
   */
  public int getPressure() {
    return pressure;
  }


  /**
   * Sets the value of the 'pressure' field.
   * @param value the value to set.
   */
  public void setPressure(int value) {
    this.pressure = value;
  }

  /**
   * Gets the value of the 'sea_level' field.
   * @return The value of the 'sea_level' field.
   */
  public java.lang.Integer getSeaLevel() {
    return sea_level;
  }


  /**
   * Sets the value of the 'sea_level' field.
   * @param value the value to set.
   */
  public void setSeaLevel(java.lang.Integer value) {
    this.sea_level = value;
  }

  /**
   * Gets the value of the 'grnd_level' field.
   * @return The value of the 'grnd_level' field.
   */
  public java.lang.Integer getGrndLevel() {
    return grnd_level;
  }


  /**
   * Sets the value of the 'grnd_level' field.
   * @param value the value to set.
   */
  public void setGrndLevel(java.lang.Integer value) {
    this.grnd_level = value;
  }

  /**
   * Gets the value of the 'temp' field.
   * @return The value of the 'temp' field.
   */
  public float getTemp() {
    return temp;
  }


  /**
   * Sets the value of the 'temp' field.
   * @param value the value to set.
   */
  public void setTemp(float value) {
    this.temp = value;
  }

  /**
   * Gets the value of the 'temp_max' field.
   * @return The value of the 'temp_max' field.
   */
  public float getTempMax() {
    return temp_max;
  }


  /**
   * Sets the value of the 'temp_max' field.
   * @param value the value to set.
   */
  public void setTempMax(float value) {
    this.temp_max = value;
  }

  /**
   * Gets the value of the 'temp_min' field.
   * @return The value of the 'temp_min' field.
   */
  public float getTempMin() {
    return temp_min;
  }


  /**
   * Sets the value of the 'temp_min' field.
   * @param value the value to set.
   */
  public void setTempMin(float value) {
    this.temp_min = value;
  }

  /**
   * Creates a new main RecordBuilder.
   * @return A new main RecordBuilder
   */
  public static schemas.weather.main.Builder newBuilder() {
    return new schemas.weather.main.Builder();
  }

  /**
   * Creates a new main RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new main RecordBuilder
   */
  public static schemas.weather.main.Builder newBuilder(schemas.weather.main.Builder other) {
    if (other == null) {
      return new schemas.weather.main.Builder();
    } else {
      return new schemas.weather.main.Builder(other);
    }
  }

  /**
   * Creates a new main RecordBuilder by copying an existing main instance.
   * @param other The existing instance to copy.
   * @return A new main RecordBuilder
   */
  public static schemas.weather.main.Builder newBuilder(schemas.weather.main other) {
    if (other == null) {
      return new schemas.weather.main.Builder();
    } else {
      return new schemas.weather.main.Builder(other);
    }
  }

  /**
   * RecordBuilder for main instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<main>
    implements org.apache.avro.data.RecordBuilder<main> {

    private float feels_like;
    private int humidity;
    private int pressure;
    private java.lang.Integer sea_level;
    private java.lang.Integer grnd_level;
    private float temp;
    private float temp_max;
    private float temp_min;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(schemas.weather.main.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.feels_like)) {
        this.feels_like = data().deepCopy(fields()[0].schema(), other.feels_like);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.humidity)) {
        this.humidity = data().deepCopy(fields()[1].schema(), other.humidity);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.pressure)) {
        this.pressure = data().deepCopy(fields()[2].schema(), other.pressure);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.sea_level)) {
        this.sea_level = data().deepCopy(fields()[3].schema(), other.sea_level);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.grnd_level)) {
        this.grnd_level = data().deepCopy(fields()[4].schema(), other.grnd_level);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.temp)) {
        this.temp = data().deepCopy(fields()[5].schema(), other.temp);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.temp_max)) {
        this.temp_max = data().deepCopy(fields()[6].schema(), other.temp_max);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.temp_min)) {
        this.temp_min = data().deepCopy(fields()[7].schema(), other.temp_min);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
    }

    /**
     * Creates a Builder by copying an existing main instance
     * @param other The existing instance to copy.
     */
    private Builder(schemas.weather.main other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.feels_like)) {
        this.feels_like = data().deepCopy(fields()[0].schema(), other.feels_like);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.humidity)) {
        this.humidity = data().deepCopy(fields()[1].schema(), other.humidity);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.pressure)) {
        this.pressure = data().deepCopy(fields()[2].schema(), other.pressure);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.sea_level)) {
        this.sea_level = data().deepCopy(fields()[3].schema(), other.sea_level);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.grnd_level)) {
        this.grnd_level = data().deepCopy(fields()[4].schema(), other.grnd_level);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.temp)) {
        this.temp = data().deepCopy(fields()[5].schema(), other.temp);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.temp_max)) {
        this.temp_max = data().deepCopy(fields()[6].schema(), other.temp_max);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.temp_min)) {
        this.temp_min = data().deepCopy(fields()[7].schema(), other.temp_min);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'feels_like' field.
      * @return The value.
      */
    public float getFeelsLike() {
      return feels_like;
    }


    /**
      * Sets the value of the 'feels_like' field.
      * @param value The value of 'feels_like'.
      * @return This builder.
      */
    public schemas.weather.main.Builder setFeelsLike(float value) {
      validate(fields()[0], value);
      this.feels_like = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'feels_like' field has been set.
      * @return True if the 'feels_like' field has been set, false otherwise.
      */
    public boolean hasFeelsLike() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'feels_like' field.
      * @return This builder.
      */
    public schemas.weather.main.Builder clearFeelsLike() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'humidity' field.
      * @return The value.
      */
    public int getHumidity() {
      return humidity;
    }


    /**
      * Sets the value of the 'humidity' field.
      * @param value The value of 'humidity'.
      * @return This builder.
      */
    public schemas.weather.main.Builder setHumidity(int value) {
      validate(fields()[1], value);
      this.humidity = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'humidity' field has been set.
      * @return True if the 'humidity' field has been set, false otherwise.
      */
    public boolean hasHumidity() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'humidity' field.
      * @return This builder.
      */
    public schemas.weather.main.Builder clearHumidity() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'pressure' field.
      * @return The value.
      */
    public int getPressure() {
      return pressure;
    }


    /**
      * Sets the value of the 'pressure' field.
      * @param value The value of 'pressure'.
      * @return This builder.
      */
    public schemas.weather.main.Builder setPressure(int value) {
      validate(fields()[2], value);
      this.pressure = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'pressure' field has been set.
      * @return True if the 'pressure' field has been set, false otherwise.
      */
    public boolean hasPressure() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'pressure' field.
      * @return This builder.
      */
    public schemas.weather.main.Builder clearPressure() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'sea_level' field.
      * @return The value.
      */
    public java.lang.Integer getSeaLevel() {
      return sea_level;
    }


    /**
      * Sets the value of the 'sea_level' field.
      * @param value The value of 'sea_level'.
      * @return This builder.
      */
    public schemas.weather.main.Builder setSeaLevel(java.lang.Integer value) {
      validate(fields()[3], value);
      this.sea_level = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'sea_level' field has been set.
      * @return True if the 'sea_level' field has been set, false otherwise.
      */
    public boolean hasSeaLevel() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'sea_level' field.
      * @return This builder.
      */
    public schemas.weather.main.Builder clearSeaLevel() {
      sea_level = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'grnd_level' field.
      * @return The value.
      */
    public java.lang.Integer getGrndLevel() {
      return grnd_level;
    }


    /**
      * Sets the value of the 'grnd_level' field.
      * @param value The value of 'grnd_level'.
      * @return This builder.
      */
    public schemas.weather.main.Builder setGrndLevel(java.lang.Integer value) {
      validate(fields()[4], value);
      this.grnd_level = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'grnd_level' field has been set.
      * @return True if the 'grnd_level' field has been set, false otherwise.
      */
    public boolean hasGrndLevel() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'grnd_level' field.
      * @return This builder.
      */
    public schemas.weather.main.Builder clearGrndLevel() {
      grnd_level = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'temp' field.
      * @return The value.
      */
    public float getTemp() {
      return temp;
    }


    /**
      * Sets the value of the 'temp' field.
      * @param value The value of 'temp'.
      * @return This builder.
      */
    public schemas.weather.main.Builder setTemp(float value) {
      validate(fields()[5], value);
      this.temp = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'temp' field has been set.
      * @return True if the 'temp' field has been set, false otherwise.
      */
    public boolean hasTemp() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'temp' field.
      * @return This builder.
      */
    public schemas.weather.main.Builder clearTemp() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'temp_max' field.
      * @return The value.
      */
    public float getTempMax() {
      return temp_max;
    }


    /**
      * Sets the value of the 'temp_max' field.
      * @param value The value of 'temp_max'.
      * @return This builder.
      */
    public schemas.weather.main.Builder setTempMax(float value) {
      validate(fields()[6], value);
      this.temp_max = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'temp_max' field has been set.
      * @return True if the 'temp_max' field has been set, false otherwise.
      */
    public boolean hasTempMax() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'temp_max' field.
      * @return This builder.
      */
    public schemas.weather.main.Builder clearTempMax() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'temp_min' field.
      * @return The value.
      */
    public float getTempMin() {
      return temp_min;
    }


    /**
      * Sets the value of the 'temp_min' field.
      * @param value The value of 'temp_min'.
      * @return This builder.
      */
    public schemas.weather.main.Builder setTempMin(float value) {
      validate(fields()[7], value);
      this.temp_min = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'temp_min' field has been set.
      * @return True if the 'temp_min' field has been set, false otherwise.
      */
    public boolean hasTempMin() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'temp_min' field.
      * @return This builder.
      */
    public schemas.weather.main.Builder clearTempMin() {
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public main build() {
      try {
        main record = new main();
        record.feels_like = fieldSetFlags()[0] ? this.feels_like : (java.lang.Float) defaultValue(fields()[0]);
        record.humidity = fieldSetFlags()[1] ? this.humidity : (java.lang.Integer) defaultValue(fields()[1]);
        record.pressure = fieldSetFlags()[2] ? this.pressure : (java.lang.Integer) defaultValue(fields()[2]);
        record.sea_level = fieldSetFlags()[3] ? this.sea_level : (java.lang.Integer) defaultValue(fields()[3]);
        record.grnd_level = fieldSetFlags()[4] ? this.grnd_level : (java.lang.Integer) defaultValue(fields()[4]);
        record.temp = fieldSetFlags()[5] ? this.temp : (java.lang.Float) defaultValue(fields()[5]);
        record.temp_max = fieldSetFlags()[6] ? this.temp_max : (java.lang.Float) defaultValue(fields()[6]);
        record.temp_min = fieldSetFlags()[7] ? this.temp_min : (java.lang.Float) defaultValue(fields()[7]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<main>
    WRITER$ = (org.apache.avro.io.DatumWriter<main>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<main>
    READER$ = (org.apache.avro.io.DatumReader<main>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeFloat(this.feels_like);

    out.writeInt(this.humidity);

    out.writeInt(this.pressure);

    if (this.sea_level == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.sea_level);
    }

    if (this.grnd_level == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.grnd_level);
    }

    out.writeFloat(this.temp);

    out.writeFloat(this.temp_max);

    out.writeFloat(this.temp_min);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.feels_like = in.readFloat();

      this.humidity = in.readInt();

      this.pressure = in.readInt();

      if (in.readIndex() != 1) {
        in.readNull();
        this.sea_level = null;
      } else {
        this.sea_level = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.grnd_level = null;
      } else {
        this.grnd_level = in.readInt();
      }

      this.temp = in.readFloat();

      this.temp_max = in.readFloat();

      this.temp_min = in.readFloat();

    } else {
      for (int i = 0; i < 8; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.feels_like = in.readFloat();
          break;

        case 1:
          this.humidity = in.readInt();
          break;

        case 2:
          this.pressure = in.readInt();
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.sea_level = null;
          } else {
            this.sea_level = in.readInt();
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.grnd_level = null;
          } else {
            this.grnd_level = in.readInt();
          }
          break;

        case 5:
          this.temp = in.readFloat();
          break;

        case 6:
          this.temp_max = in.readFloat();
          break;

        case 7:
          this.temp_min = in.readFloat();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










